<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
	 xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                         http://www.springframework.org/schema/tx
				        http://www.springframework.org/schema/tx/spring-tx.xsd
				        http://www.springframework.org/schema/aop
				        http://www.springframework.org/schema/aop/spring-aop.xsd"
                        >
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.cn.uuu.annotation,com.cn.core.policy" >
	</context:component-scan>

	<!-- 开启注解 -->
	<mvc:annotation-driven />

	<!--引入属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties,file:/zhangtejun/dev/config.properties" />

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 配置国际化资源文件路径 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<!-- 定义消息资源文件的相对路径 -->
			<value>message</value>
		</property>
	</bean>

	<!-- dataSource -->


<!-- jndi -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">   
        <property name="jndiName"><value>java:comp/env/jdbc/EmployeeDB</value></property>   
    </bean>   
<!-- jndi end -->

<!-- 
 Spring MVC处理异常有3种方式： 
 （1）使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver；
 （2）实现Spring的异常处理接口HandlerExceptionResolver 自定义自己的异常处理器；
（3）使用@ExceptionHandler注解实现异常处理
 -->


    <mvc:default-servlet-handler/>
    <mvc:resources location="/resources/" mapping="/resources/**"/>
    <mvc:interceptors>
<!--         配置全局拦截器 -->
        <mvc:interceptor>
        	<mvc:mapping path="/**"/>
        	<bean class="com.cn.core.interceptor.RequestParamCheckInterceptor"/>
<!--         	<ref bean="requestParamCheckInterceptor"/> -->
        </mvc:interceptor>
        
        <mvc:interceptor>
        	<mvc:mapping path="/**"/>
        	<bean class="com.cn.core.interceptor.UserLoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
	<!-- **************************方式一Start*********************************** -->
	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效 -->
		<property name="configLocation" value="classpath:spring-mybatis.xml" />
		<!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation有一个即可， 
			当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 -->
		<!-- <property name="mapperLocations" value="classpath*:com/xxt/ibatis/dbcp/**/*.xml"/> -->
<!-- 		自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/cn/uuu/mapping/*.xml"></property>
		<property name="typeAliasesPackage">
			<value>
			com.cn.uuu.user.entity
			</value>
		</property>
	</bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cn.uuu.**.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <!-- 定义事务管理器 对mybatis操作数据库的控制，spring使用jdbc的事务控制-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" />
	<!-- **************************方式一END*********************************** -->


	<bean id="configFileView" class="com.cn.core.view.GenericFileView"
		p:contentType="text/plain" p:url="" scope="prototype" />

	<bean id="swfFileView" class="com.cn.core.view.GenericFileView"
		p:contentType="text/*" p:url="" scope="prototype" />
	<bean id="pdfView" class="com.cn.core.view.PdfView"/>
	
	<bean id="pdfStamperView" class="com.cn.core.view.BaseAbstractPdfStamperView">
		<property name="url" value="/WEB-INF/zh_CN/pdf/temp.pdf"/>
	</bean>
	<bean id="excelView" class="com.cn.core.view.ExcelView"/>


<!-- ****************************************** -->
<!--1、检查扩展名（如my.pdf）；2、检查Parameter（如my?format=pdf）；3、检查Accept Header-->  
    <bean id= "contentNegotiationManager" class= "org.springframework.web.accept.ContentNegotiationManagerFactoryBean">  
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->  
        <property name= "favorPathExtension" value= "true" />  
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->  
        <property name= "favorParameter" value= "true" />  
        <property name= "parameterName" value= "format"/>  
        <!-- 是否忽略Accept Header -->  
        <property name= "ignoreAcceptHeader" value= "false"/>  
        <property name= "mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->  
            <value>  
                do=*/*  
                jsonp=application/javascript
                pdf=application/pdf
                xls=application/vnd.ms-excel
            </value>  
        </property>  
        <!-- 默认的content type -->  
        <property name= "defaultContentType" value= "text/html" />  
    </bean>  

<!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1"/>
<!-- 内容协商管理器 用于决定media type -->  
        <property name= "contentNegotiationManager" ref= "contentNegotiationManager"/>
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="prefix" value="/WEB-INF/zh_CN/jsp/"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
                 <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
                <bean class="com.cn.core.view.PdfViewResolver"/>
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" >
                    <property name="disableCaching" value="false"></property>
                </bean>
            </list>
        </property>
    </bean>
    
    <bean id="exceptionHandler" class="com.cn.uuu.core.exception.MainExceptionHandler"/>
    
<!--     <bean id="requestParamCheckInterceptor" class="com.cn.core.interceptor.RequestParamCheckInterceptor"> -->
<!--     	<property name="policyList"> -->
<!--     		<list> -->
<!--     			 -->
    			<bean class="com.cn.core.policy.RequestParamCheckPolicy">
    				<property name="messageKey"><value>error.request.param</value></property>
				    <property name="denyPattern">
				        <map>
				            <entry key="js1"><value><![CDATA[<script]]></value></entry>
							<entry key="js2"><value>javascript</value></entry>
							<entry key="js3"><value><![CDATA[<img]]></value></entry>
							<entry key="js4"><value><![CDATA[<a]]></value></entry>
							<entry key="js5"><value><![CDATA[<div]]></value></entry>
							<entry key="js6"><value><![CDATA[<input]]></value></entry>
							<entry key="js7"><value><![CDATA[<bgsound]]></value></entry>
							<entry key="js8"><value><![CDATA[<link]]></value></entry>
							<entry key="js9"><value><![CDATA[<iframe]]></value></entry>
							<entry key="js10"><value><![CDATA[<meta]]></value></entry>
							<entry key="js11"><value><![CDATA[<body]]></value></entry>
							<entry key="js12"><value><![CDATA[<style]]></value></entry>
							<entry key="js13"><value><![CDATA[<object]]></value></entry>
							<entry key="js14"><value><![CDATA[<xml]]></value></entry>
							<entry key="js15"><value><![CDATA[style=]]></value></entry>
							<entry key="js16"><value><![CDATA[<applet]]></value></entry>
							<entry key="js17"><value><![CDATA[<embed]]></value></entry>
							<entry key="js18"><value><![CDATA[<frameset]]></value></entry>
							<entry key="js19"><value><![CDATA[<frame]]></value></entry>
							<entry key="js20"><value><![CDATA[<layer]]></value></entry>
							<entry key="js21"><value><![CDATA[<ilayer]]></value></entry>
							<entry key="js22"><value><![CDATA[xss:]]></value></entry>
							<entry key="js23"><value><![CDATA[\.\.\/]]></value></entry>
				        </map>
				    </property>
    			</bean>
<!--     		</list> -->
<!--     	</property> -->
<!--     </bean> -->
    
</beans>